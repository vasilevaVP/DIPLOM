<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Geologica:wght@100..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/rest.css">
    <link rel="stylesheet" href="./css/style.css">
    <title>Админ-панель</title>
    <link rel="icon" href="./img/iconlogo.ico">
    <style>
        body {
            font-family: Geologica;
            background-color: #f4f4f4;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
       
        ::file-selector-button {
            height: 40px;
            border: none;
            background: #a1a1a1;
            padding: 20px 20px;
            border-radius: 5px;
            padding: 0 30px;
            color: #fff;
            font: 400 12px Geologica;
            cursor: pointer;
            text-align: center;
        }
        
        .admin-container {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            font: 400 16px Geologica;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            width: 80%;
            max-width: 800px;
            margin-top: 20px;
        }
        
        .form-section {
            margin-bottom: 20px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .admin-container h1 {
            font: 600 40px Geologica;
            text-align: center;
            margin-bottom: 40px;
            color: #333;
        }
        
        .admin-container h2 {
            font: 500 32px Geologica;
            text-align: center;
            margin: 0;
            margin-bottom: 20px;
            color: #333;
        }

        .admin-container p {
            font: 300 20px Geologica;
            font-size: 1.1em;
            color: #555;
            margin-bottom: 15px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #555;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: calc(100% - 20px);
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font: 400 16px Geologica;
        }

        .button-container {
            display: flex;
            justify-content: flex-end;
        }
        
        button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;  
            margin-top: 5px;
            font: 400 16px Geologica;
        }

        .form-section button:hover {
            background-color: #0056b3;
        }
        
        .message {
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
        }

        .success {
            background-color: #d4edda;
            color: #155724;
        }
        
        .error {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .close {
            color: #606060;
            float: left;
            font: 300 15px Geologica;
            margin-top: 20px;
        }
        
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        
        .preview-container {
            margin-top: 10px;
            max-width: 200px;
            max-height: 200px;
        }
        
        .preview-container img {
            max-width: 200px;
            max-height: 200px;
        }
        
        .user-list {
            width: 80%;
            margin: 20px auto;
            border: 1px solid #ddd;
            padding: 20px;
        }

        .user-list table {
            width: 100%;
            border-collapse: collapse;
        }

        .user-list th,
        .user-list td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        
        .message {
            padding: 10px;
            margin-bottom: 10px;
        }
        
        .message.success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
        }
        
        .message.error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
        }
        
        .development-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); 
            gap: 15px;
        }

        .development-item {
            display: flex;
            flex-wrap: wrap;
            align-items: space-between;
            border: 1px solid #ddd;
            padding: 10px;
            transition: transform 0.2s ease-in-out;
        }
        
        .development-item:hover {
            transform: scale(1.05); 
        }

        .development-item img {
            max-width: 100%;
            object-fit: contain;
        }

        .development-actions {
            display: flex;
            justify-content: left;
            gap: 5px;
            align-items: center;
            margin-top: 10px;
        }
        
        .development-actions button {
            font: 400 12px Geologica;
        }

        .development-actions form {
            margin: 0;
        }

        .tags-list, .categories-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
        margin-top: 15px;
    }
    
    .tag-item, .category-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .delete-tag-btn, .delete-category-btn {
        padding: 5px 10px;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    </style>
</head>

<body>
    <a href="/index"><span class="close" id="closeConfirm">← На главную</span></a>
    <div class="admin-container">
        <h1>Админ панель</h1>
        <% if (user) { %>
            <p>Добро пожаловать, <%= user.fullName %>! <a href="/logout">Выйти</a></p>
        <% } else { %>
            <p>Вы не авторизованы.</p>
            <p><a href="/login">Авторизоваться</a></p>
        <% } %>
        
        <div class="form-section">
            <h2>Добавить тег</h2>
            <div class="form-group">
                <label for="tagName">Название тега:</label>
                <input type="text" id="tagName" name="tagName" required>
            </div>
            <div class="button-container">
                <button onclick="addTag()">Добавить тег</button>
            </div>
            <div id="tagMessage"></div>
        </div>
        
        <div class="form-section">
            <h2>Добавить категорию</h2>
            <div class="form-group">
                <label for="categoryName">Название категории:</label>
                <input type="text" id="categoryName" name="categoryName" required>
            </div>
            <div class="button-container">
                <button onclick="addCategory()">Добавить категорию</button>
            </div>
            <div id="categoryMessage"></div>
        </div>
                <div class="form-group" style="display: none;">
                    <select id="developmentCategoryId" name="category_id" required>
                        <% categories.forEach(category => { %>
                            <option value="<%= category.id %>"><%= category.name %></option>
                        <% }); %>
                    </select>
                </div>
                <div class="form-group" style="display: none;">
                    <div id="tagCheckboxes">
                        <% tags.forEach(tag => { %>
                            <div>
                                <label for="tag<%= tag.id %>"><%= tag.name %></label>
                            </div>
                        <% }); %>
                    </div>
                </div>
                <div class="form-section">
                    <h2>Управление тегами</h2>
                    <div class="tags-list">
                        <% tags.forEach(tag => { %>
                            <div class="tag-item" data-id="<%= tag.id %>">
                                <span><%= tag.name %></span>
                                <button class="delete-tag-btn" data-id="<%= tag.id %>">Удалить</button>
                            </div>
                        <% }); %>
                    </div>
                </div>
                
                <div class="form-section">
                    <h2>Управление категориями</h2>
                    <div class="categories-list">
                        <% categories.forEach(category => { %>
                            <div class="category-item" data-id="<%= category.id %>">
                                <span><%= category.name %></span>
                                <button class="delete-category-btn" data-id="<%= category.id %>">Удалить</button>
                            </div>
                        <% }); %>
                    </div>
                </div>
        
        <div class="form-section">
            <h2>Список пользователей</h2>
            <p>Всего пользователей: <%= userCount %></p>
            <div class="user-list">
                <table>
                    <tr>
                        <th>ID</th>
                        <th>ФИО</th>
                        <th>Почта</th>
                    </tr>
                    <% if(users) {
                        users.forEach(user => { %>
                        <tr>
                            <td><%= user.id %></td>
                            <td><%= user.fullName %></td>
                            <td><%= user.email %></td>
                        </tr>
                    <% });
                    } %>
                </table>
            </div>
        </div>
    </div>

    <script>
        const previewImg = document.getElementById('preview-img');
        const developmentsListContainer = document.getElementById('developmentsList');
        
        function previewImage(event) {
            const file = event.target.files[0];
            if (file) {
                previewImg.src = URL.createObjectURL(file);
                previewImg.style.display = 'block';
            } else {
                previewImg.style.display = 'none';
                previewImg.src = '#';
            }
        }

        async function addTag() {
            const tagName = document.getElementById('tagName').value.trim();
            const tagMessage = document.getElementById('tagMessage');
            
            try {
                const response = await fetch('/admin/add/tag', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name: tagName }),
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    tagMessage.innerHTML = `<div class="message success">Тег "${data.tag.name}" успешно добавлен</div>`;
                    document.getElementById('tagName').value = '';
                    // Обновляем список тегов в форме
                    const tagCheckboxes = document.getElementById('tagCheckboxes');
                    const newTagDiv = document.createElement('div');
                    newTagDiv.innerHTML = `
                        <input type="checkbox" name="tags" value="${data.tag.id}" id="tag${data.tag.id}">
                        <label for="tag${data.tag.id}">${data.tag.name}</label>
                    `;
                    tagCheckboxes.appendChild(newTagDiv);
                } else {
                    tagMessage.innerHTML = `<div class="message error">${data.error}</div>`;
                }
                
                setTimeout(() => tagMessage.innerHTML = "", 5000);
            } catch (error) {
                console.error('Ошибка при добавлении тега:', error);
                tagMessage.innerHTML = `<div class="message error">Ошибка сервера. Попробуйте позже.</div>`;
                setTimeout(() => tagMessage.innerHTML = "", 5000);
            }
        }

        async function addCategory() {
            const categoryName = document.getElementById('categoryName').value.trim();
            const categoryMessage = document.getElementById('categoryMessage');
            
            try {
                const response = await fetch('/admin/add/category', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name: categoryName }),
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    categoryMessage.innerHTML = `<div class="message success">Категория "${data.category.name}" успешно добавлена</div>`;
                    document.getElementById('categoryName').value = '';
                    // Обновляем список категорий в форме
                    const categorySelect = document.getElementById('developmentCategoryId');
                    const newOption = document.createElement('option');
                    newOption.value = data.category.id;
                    newOption.text = data.category.name;
                    categorySelect.appendChild(newOption);
                } else {
                    categoryMessage.innerHTML = `<div class="message error">${data.error}</div>`;
                }
                
                setTimeout(() => categoryMessage.innerHTML = "", 5000);
            } catch (error) {
                console.error('Ошибка при добавлении категории:', error);
                categoryMessage.innerHTML = `<div class="message error">Ошибка сервера. Попробуйте позже.</div>`;
                setTimeout(() => categoryMessage.innerHTML = "", 5000);
            }
        }
        // Удаление тега
    document.querySelectorAll('.delete-tag-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            const tagId = this.getAttribute('data-id');
            if (confirm('Вы уверены, что хотите удалить этот тег? Все связи с разработками будут потеряны.')) {
                try {
                    const response = await fetch(`/admin/delete/tag/${tagId}`, {
                        method: 'POST'
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        document.querySelector(`.tag-item[data-id="${tagId}"]`).remove();
                        alert('Тег успешно удален');
                    } else {
                        alert(data.error || 'Ошибка удаления');
                    }
                } catch (error) {
                    console.error('Ошибка:', error);
                    alert('Ошибка соединения');
                }
            }
        });
    });
    
    // Удаление категории
    document.querySelectorAll('.delete-category-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            const categoryId = this.getAttribute('data-id');
            if (confirm('Вы уверены, что хотите удалить эту категорию? Все разработки в этой категории будут без категории.')) {
                try {
                    const response = await fetch(`/admin/delete/category/${categoryId}`, {
                        method: 'POST'
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        document.querySelector(`.category-item[data-id="${categoryId}"]`).remove();
                        alert('Категория успешно удалена');
                    } else {
                        alert(data.error || 'Ошибка удаления');
                    }
                } catch (error) {
                    console.error('Ошибка:', error);
                    alert('Ошибка соединения');
                }
            }
        });
    });
        // Инициализация при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            loadDevelopments();
        });
    </script>
</body>
</html>